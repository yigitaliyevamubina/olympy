// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: athlete_service/athlete.proto

package athlete_service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Athlete struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	CountryId            int64    `protobuf:"varint,3,opt,name=country_id,json=countryId,proto3" json:"country_id"`
	SportType            string   `protobuf:"bytes,4,opt,name=sport_type,json=sportType,proto3" json:"sport_type"`
	CreatedAt            string   `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt            string   `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Athlete) Reset()         { *m = Athlete{} }
func (m *Athlete) String() string { return proto.CompactTextString(m) }
func (*Athlete) ProtoMessage()    {}
func (*Athlete) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea8d4527636194e9, []int{0}
}
func (m *Athlete) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Athlete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Athlete.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Athlete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Athlete.Merge(m, src)
}
func (m *Athlete) XXX_Size() int {
	return m.Size()
}
func (m *Athlete) XXX_DiscardUnknown() {
	xxx_messageInfo_Athlete.DiscardUnknown(m)
}

var xxx_messageInfo_Athlete proto.InternalMessageInfo

func (m *Athlete) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Athlete) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Athlete) GetCountryId() int64 {
	if m != nil {
		return m.CountryId
	}
	return 0
}

func (m *Athlete) GetSportType() string {
	if m != nil {
		return m.SportType
	}
	return ""
}

func (m *Athlete) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Athlete) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type GetSingleRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSingleRequest) Reset()         { *m = GetSingleRequest{} }
func (m *GetSingleRequest) String() string { return proto.CompactTextString(m) }
func (*GetSingleRequest) ProtoMessage()    {}
func (*GetSingleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea8d4527636194e9, []int{1}
}
func (m *GetSingleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSingleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSingleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSingleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSingleRequest.Merge(m, src)
}
func (m *GetSingleRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetSingleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSingleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSingleRequest proto.InternalMessageInfo

func (m *GetSingleRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ListRequest struct {
	Page                 int32    `protobuf:"varint,1,opt,name=page,proto3" json:"page"`
	Limit                int32    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit"`
	CountryId            int64    `protobuf:"varint,3,opt,name=country_id,json=countryId,proto3" json:"country_id"`
	SportType            string   `protobuf:"bytes,4,opt,name=sport_type,json=sportType,proto3" json:"sport_type"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRequest) Reset()         { *m = ListRequest{} }
func (m *ListRequest) String() string { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()    {}
func (*ListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea8d4527636194e9, []int{2}
}
func (m *ListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRequest.Merge(m, src)
}
func (m *ListRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRequest proto.InternalMessageInfo

func (m *ListRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListRequest) GetCountryId() int64 {
	if m != nil {
		return m.CountryId
	}
	return 0
}

func (m *ListRequest) GetSportType() string {
	if m != nil {
		return m.SportType
	}
	return ""
}

type ListResponse struct {
	Count                int64      `protobuf:"varint,1,opt,name=count,proto3" json:"count"`
	Athletes             []*Athlete `protobuf:"bytes,2,rep,name=athletes,proto3" json:"athletes"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ListResponse) Reset()         { *m = ListResponse{} }
func (m *ListResponse) String() string { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()    {}
func (*ListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea8d4527636194e9, []int{3}
}
func (m *ListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListResponse.Merge(m, src)
}
func (m *ListResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListResponse proto.InternalMessageInfo

func (m *ListResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ListResponse) GetAthletes() []*Athlete {
	if m != nil {
		return m.Athletes
	}
	return nil
}

type Message struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea8d4527636194e9, []int{4}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Athlete)(nil), "athlete_service.Athlete")
	proto.RegisterType((*GetSingleRequest)(nil), "athlete_service.GetSingleRequest")
	proto.RegisterType((*ListRequest)(nil), "athlete_service.ListRequest")
	proto.RegisterType((*ListResponse)(nil), "athlete_service.ListResponse")
	proto.RegisterType((*Message)(nil), "athlete_service.Message")
}

func init() { proto.RegisterFile("athlete_service/athlete.proto", fileDescriptor_ea8d4527636194e9) }

var fileDescriptor_ea8d4527636194e9 = []byte{
	// 393 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0xc1, 0xce, 0xd2, 0x40,
	0x10, 0xb6, 0x85, 0x82, 0x1d, 0x14, 0xc9, 0xc6, 0xc3, 0x86, 0x48, 0x83, 0xf5, 0xc2, 0x09, 0x13,
	0xf4, 0x01, 0xac, 0xd1, 0x10, 0x22, 0x5e, 0x8a, 0x27, 0x2f, 0x4d, 0x65, 0x27, 0xb8, 0x09, 0xb4,
	0xb5, 0x3b, 0x35, 0xe1, 0x4d, 0x7c, 0x05, 0xdf, 0xc4, 0xa3, 0x8f, 0x60, 0xf0, 0x31, 0xfe, 0xcb,
	0x9f, 0xee, 0x6e, 0xff, 0xfc, 0x29, 0x3f, 0x27, 0x6e, 0x33, 0xdf, 0x37, 0xf3, 0xcd, 0xcc, 0x7e,
	0x59, 0x98, 0xa4, 0xf4, 0x7d, 0x8f, 0x84, 0x89, 0xc2, 0xf2, 0xa7, 0xdc, 0xe2, 0x6b, 0x9b, 0xcf,
	0x8b, 0x32, 0xa7, 0x9c, 0x3d, 0x6b, 0xd1, 0xe1, 0x6f, 0x07, 0xfa, 0x91, 0xc1, 0xd8, 0x10, 0x5c,
	0x29, 0xb8, 0x33, 0x75, 0x66, 0x9d, 0xd8, 0x95, 0x82, 0x31, 0xe8, 0x66, 0xe9, 0x01, 0xb9, 0x3b,
	0x75, 0x66, 0x7e, 0xac, 0x63, 0x36, 0x01, 0xd8, 0xe6, 0x55, 0x46, 0xe5, 0x31, 0x91, 0x82, 0x77,
	0x74, 0xad, 0x6f, 0x91, 0x95, 0xa8, 0x69, 0x55, 0xe4, 0x25, 0x25, 0x74, 0x2c, 0x90, 0x77, 0x75,
	0xa3, 0xaf, 0x91, 0x2f, 0xc7, 0xc2, 0x74, 0x97, 0x98, 0x12, 0x8a, 0x24, 0x25, 0xee, 0x19, 0xda,
	0x22, 0x11, 0xd5, 0x74, 0x55, 0x88, 0x86, 0xee, 0x19, 0xda, 0x22, 0x11, 0x85, 0x21, 0x8c, 0x96,
	0x48, 0x1b, 0x99, 0xed, 0xf6, 0x18, 0xe3, 0x8f, 0x0a, 0x15, 0xb5, 0x77, 0x0e, 0x2b, 0x18, 0xac,
	0xa5, 0xa2, 0x86, 0x66, 0xd0, 0x2d, 0xd2, 0x1d, 0xea, 0x02, 0x2f, 0xd6, 0x31, 0x7b, 0x0e, 0xde,
	0x5e, 0x1e, 0x24, 0xe9, 0xbb, 0xbc, 0xd8, 0x24, 0xd7, 0x1d, 0x16, 0x7e, 0x85, 0x27, 0x66, 0xac,
	0x2a, 0xf2, 0x4c, 0xe9, 0x19, 0xba, 0xd7, 0x6e, 0x66, 0x12, 0xf6, 0x16, 0x1e, 0xdb, 0xf7, 0x57,
	0xdc, 0x9d, 0x76, 0x66, 0x83, 0x05, 0x9f, 0xb7, 0x0c, 0x99, 0x5b, 0x33, 0xe2, 0xbb, 0xca, 0xf0,
	0x15, 0xf4, 0x3f, 0xa3, 0x52, 0xf5, 0xea, 0x1c, 0xfa, 0x07, 0x13, 0x6a, 0x61, 0x3f, 0x6e, 0xd2,
	0xc5, 0x8d, 0x0b, 0x43, 0xdb, 0xba, 0x31, 0x4a, 0xec, 0x1d, 0x40, 0x24, 0x44, 0x63, 0xee, 0xc5,
	0x49, 0xe3, 0x8b, 0x0c, 0x8b, 0x60, 0xf0, 0x51, 0x48, 0xba, 0x46, 0x62, 0x0d, 0x4f, 0x3f, 0x60,
	0x1d, 0x35, 0xc0, 0xcb, 0xb3, 0xd2, 0xb6, 0xa7, 0x0f, 0xa8, 0x35, 0xf7, 0x7f, 0x32, 0xcf, 0x6c,
	0xb5, 0x14, 0x7b, 0x71, 0x56, 0x79, 0xcf, 0xfc, 0xf1, 0xe4, 0x02, 0x6b, 0x3d, 0x5a, 0x01, 0x2c,
	0x91, 0xae, 0xda, 0xcb, 0x36, 0xbf, 0x1f, 0xfd, 0x39, 0x05, 0xce, 0xdf, 0x53, 0xe0, 0xfc, 0x3b,
	0x05, 0xce, 0xaf, 0xff, 0xc1, 0xa3, 0x6f, 0x3d, 0xfd, 0xdf, 0xde, 0xdc, 0x06, 0x00, 0x00, 0xff,
	0xff, 0x1f, 0x66, 0x6d, 0x57, 0x90, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AthleteServiceClient is the client API for AthleteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AthleteServiceClient interface {
	AddAthlete(ctx context.Context, in *Athlete, opts ...grpc.CallOption) (*Athlete, error)
	EditAthlete(ctx context.Context, in *Athlete, opts ...grpc.CallOption) (*Athlete, error)
	DeleteAthlete(ctx context.Context, in *GetSingleRequest, opts ...grpc.CallOption) (*Message, error)
	ListAthletes(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	GetAthlete(ctx context.Context, in *GetSingleRequest, opts ...grpc.CallOption) (*Athlete, error)
}

type athleteServiceClient struct {
	cc *grpc.ClientConn
}

func NewAthleteServiceClient(cc *grpc.ClientConn) AthleteServiceClient {
	return &athleteServiceClient{cc}
}

func (c *athleteServiceClient) AddAthlete(ctx context.Context, in *Athlete, opts ...grpc.CallOption) (*Athlete, error) {
	out := new(Athlete)
	err := c.cc.Invoke(ctx, "/athlete_service.AthleteService/AddAthlete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *athleteServiceClient) EditAthlete(ctx context.Context, in *Athlete, opts ...grpc.CallOption) (*Athlete, error) {
	out := new(Athlete)
	err := c.cc.Invoke(ctx, "/athlete_service.AthleteService/EditAthlete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *athleteServiceClient) DeleteAthlete(ctx context.Context, in *GetSingleRequest, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/athlete_service.AthleteService/DeleteAthlete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *athleteServiceClient) ListAthletes(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/athlete_service.AthleteService/ListAthletes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *athleteServiceClient) GetAthlete(ctx context.Context, in *GetSingleRequest, opts ...grpc.CallOption) (*Athlete, error) {
	out := new(Athlete)
	err := c.cc.Invoke(ctx, "/athlete_service.AthleteService/GetAthlete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AthleteServiceServer is the server API for AthleteService service.
type AthleteServiceServer interface {
	AddAthlete(context.Context, *Athlete) (*Athlete, error)
	EditAthlete(context.Context, *Athlete) (*Athlete, error)
	DeleteAthlete(context.Context, *GetSingleRequest) (*Message, error)
	ListAthletes(context.Context, *ListRequest) (*ListResponse, error)
	GetAthlete(context.Context, *GetSingleRequest) (*Athlete, error)
}

// UnimplementedAthleteServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAthleteServiceServer struct {
}

func (*UnimplementedAthleteServiceServer) AddAthlete(ctx context.Context, req *Athlete) (*Athlete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAthlete not implemented")
}
func (*UnimplementedAthleteServiceServer) EditAthlete(ctx context.Context, req *Athlete) (*Athlete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditAthlete not implemented")
}
func (*UnimplementedAthleteServiceServer) DeleteAthlete(ctx context.Context, req *GetSingleRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAthlete not implemented")
}
func (*UnimplementedAthleteServiceServer) ListAthletes(ctx context.Context, req *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAthletes not implemented")
}
func (*UnimplementedAthleteServiceServer) GetAthlete(ctx context.Context, req *GetSingleRequest) (*Athlete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAthlete not implemented")
}

func RegisterAthleteServiceServer(s *grpc.Server, srv AthleteServiceServer) {
	s.RegisterService(&_AthleteService_serviceDesc, srv)
}

func _AthleteService_AddAthlete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Athlete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AthleteServiceServer).AddAthlete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/athlete_service.AthleteService/AddAthlete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AthleteServiceServer).AddAthlete(ctx, req.(*Athlete))
	}
	return interceptor(ctx, in, info, handler)
}

func _AthleteService_EditAthlete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Athlete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AthleteServiceServer).EditAthlete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/athlete_service.AthleteService/EditAthlete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AthleteServiceServer).EditAthlete(ctx, req.(*Athlete))
	}
	return interceptor(ctx, in, info, handler)
}

func _AthleteService_DeleteAthlete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSingleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AthleteServiceServer).DeleteAthlete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/athlete_service.AthleteService/DeleteAthlete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AthleteServiceServer).DeleteAthlete(ctx, req.(*GetSingleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AthleteService_ListAthletes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AthleteServiceServer).ListAthletes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/athlete_service.AthleteService/ListAthletes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AthleteServiceServer).ListAthletes(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AthleteService_GetAthlete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSingleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AthleteServiceServer).GetAthlete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/athlete_service.AthleteService/GetAthlete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AthleteServiceServer).GetAthlete(ctx, req.(*GetSingleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AthleteService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "athlete_service.AthleteService",
	HandlerType: (*AthleteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddAthlete",
			Handler:    _AthleteService_AddAthlete_Handler,
		},
		{
			MethodName: "EditAthlete",
			Handler:    _AthleteService_EditAthlete_Handler,
		},
		{
			MethodName: "DeleteAthlete",
			Handler:    _AthleteService_DeleteAthlete_Handler,
		},
		{
			MethodName: "ListAthletes",
			Handler:    _AthleteService_ListAthletes_Handler,
		},
		{
			MethodName: "GetAthlete",
			Handler:    _AthleteService_GetAthlete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "athlete_service/athlete.proto",
}

func (m *Athlete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Athlete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Athlete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintAthlete(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintAthlete(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SportType) > 0 {
		i -= len(m.SportType)
		copy(dAtA[i:], m.SportType)
		i = encodeVarintAthlete(dAtA, i, uint64(len(m.SportType)))
		i--
		dAtA[i] = 0x22
	}
	if m.CountryId != 0 {
		i = encodeVarintAthlete(dAtA, i, uint64(m.CountryId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAthlete(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintAthlete(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetSingleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSingleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSingleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintAthlete(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SportType) > 0 {
		i -= len(m.SportType)
		copy(dAtA[i:], m.SportType)
		i = encodeVarintAthlete(dAtA, i, uint64(len(m.SportType)))
		i--
		dAtA[i] = 0x22
	}
	if m.CountryId != 0 {
		i = encodeVarintAthlete(dAtA, i, uint64(m.CountryId))
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintAthlete(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Page != 0 {
		i = encodeVarintAthlete(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Athletes) > 0 {
		for iNdEx := len(m.Athletes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Athletes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAthlete(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Count != 0 {
		i = encodeVarintAthlete(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintAthlete(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAthlete(dAtA []byte, offset int, v uint64) int {
	offset -= sovAthlete(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Athlete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAthlete(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAthlete(uint64(l))
	}
	if m.CountryId != 0 {
		n += 1 + sovAthlete(uint64(m.CountryId))
	}
	l = len(m.SportType)
	if l > 0 {
		n += 1 + l + sovAthlete(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovAthlete(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovAthlete(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSingleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAthlete(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovAthlete(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovAthlete(uint64(m.Limit))
	}
	if m.CountryId != 0 {
		n += 1 + sovAthlete(uint64(m.CountryId))
	}
	l = len(m.SportType)
	if l > 0 {
		n += 1 + l + sovAthlete(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovAthlete(uint64(m.Count))
	}
	if len(m.Athletes) > 0 {
		for _, e := range m.Athletes {
			l = e.Size()
			n += 1 + l + sovAthlete(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovAthlete(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAthlete(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAthlete(x uint64) (n int) {
	return sovAthlete(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Athlete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAthlete
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Athlete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Athlete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAthlete
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAthlete
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAthlete
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAthlete
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryId", wireType)
			}
			m.CountryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAthlete
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountryId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SportType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAthlete
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAthlete
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAthlete
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SportType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAthlete
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAthlete
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAthlete
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAthlete
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAthlete
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAthlete
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAthlete(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAthlete
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSingleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAthlete
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSingleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSingleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAthlete
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAthlete(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAthlete
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAthlete
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAthlete
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAthlete
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryId", wireType)
			}
			m.CountryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAthlete
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountryId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SportType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAthlete
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAthlete
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAthlete
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SportType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAthlete(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAthlete
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAthlete
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAthlete
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Athletes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAthlete
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAthlete
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAthlete
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Athletes = append(m.Athletes, &Athlete{})
			if err := m.Athletes[len(m.Athletes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAthlete(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAthlete
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAthlete
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAthlete
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAthlete
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAthlete
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAthlete(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAthlete
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAthlete(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAthlete
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAthlete
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAthlete
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAthlete
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAthlete
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAthlete
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAthlete        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAthlete          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAthlete = fmt.Errorf("proto: unexpected end of group")
)
