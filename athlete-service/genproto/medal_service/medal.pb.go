// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: medal_service/medal.proto

package medal_service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Medal struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	CountryId            int64    `protobuf:"varint,2,opt,name=country_id,json=countryId,proto3" json:"country_id"`
	Type                 string   `protobuf:"bytes,3,opt,name=type,proto3" json:"type"`
	EventId              int64    `protobuf:"varint,4,opt,name=event_id,json=eventId,proto3" json:"event_id"`
	AthleteId            string   `protobuf:"bytes,5,opt,name=athlete_id,json=athleteId,proto3" json:"athlete_id"`
	CreatedAt            string   `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt            string   `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Medal) Reset()         { *m = Medal{} }
func (m *Medal) String() string { return proto.CompactTextString(m) }
func (*Medal) ProtoMessage()    {}
func (*Medal) Descriptor() ([]byte, []int) {
	return fileDescriptor_f51de6f17ebbb61b, []int{0}
}
func (m *Medal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Medal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Medal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Medal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Medal.Merge(m, src)
}
func (m *Medal) XXX_Size() int {
	return m.Size()
}
func (m *Medal) XXX_DiscardUnknown() {
	xxx_messageInfo_Medal.DiscardUnknown(m)
}

var xxx_messageInfo_Medal proto.InternalMessageInfo

func (m *Medal) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Medal) GetCountryId() int64 {
	if m != nil {
		return m.CountryId
	}
	return 0
}

func (m *Medal) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Medal) GetEventId() int64 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *Medal) GetAthleteId() string {
	if m != nil {
		return m.AthleteId
	}
	return ""
}

func (m *Medal) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Medal) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type GetSingleRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSingleRequest) Reset()         { *m = GetSingleRequest{} }
func (m *GetSingleRequest) String() string { return proto.CompactTextString(m) }
func (*GetSingleRequest) ProtoMessage()    {}
func (*GetSingleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f51de6f17ebbb61b, []int{1}
}
func (m *GetSingleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSingleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSingleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSingleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSingleRequest.Merge(m, src)
}
func (m *GetSingleRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetSingleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSingleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSingleRequest proto.InternalMessageInfo

func (m *GetSingleRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ListRequest struct {
	Page                 int32    `protobuf:"varint,1,opt,name=page,proto3" json:"page"`
	Limit                int32    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit"`
	Country              int64    `protobuf:"varint,3,opt,name=country,proto3" json:"country"`
	EventId              int64    `protobuf:"varint,4,opt,name=event_id,json=eventId,proto3" json:"event_id"`
	AthleteId            string   `protobuf:"bytes,5,opt,name=athlete_id,json=athleteId,proto3" json:"athlete_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRequest) Reset()         { *m = ListRequest{} }
func (m *ListRequest) String() string { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()    {}
func (*ListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f51de6f17ebbb61b, []int{2}
}
func (m *ListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRequest.Merge(m, src)
}
func (m *ListRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRequest proto.InternalMessageInfo

func (m *ListRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListRequest) GetCountry() int64 {
	if m != nil {
		return m.Country
	}
	return 0
}

func (m *ListRequest) GetEventId() int64 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *ListRequest) GetAthleteId() string {
	if m != nil {
		return m.AthleteId
	}
	return ""
}

type ListResponse struct {
	Count                int64    `protobuf:"varint,1,opt,name=count,proto3" json:"count"`
	Medals               []*Medal `protobuf:"bytes,2,rep,name=medals,proto3" json:"medals"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListResponse) Reset()         { *m = ListResponse{} }
func (m *ListResponse) String() string { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()    {}
func (*ListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f51de6f17ebbb61b, []int{3}
}
func (m *ListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListResponse.Merge(m, src)
}
func (m *ListResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListResponse proto.InternalMessageInfo

func (m *ListResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ListResponse) GetMedals() []*Medal {
	if m != nil {
		return m.Medals
	}
	return nil
}

type Message struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_f51de6f17ebbb61b, []int{4}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_f51de6f17ebbb61b, []int{5}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return m.Size()
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type CountryMedalCount struct {
	CountryId            int64    `protobuf:"varint,1,opt,name=country_id,json=countryId,proto3" json:"country_id"`
	CountryName          string   `protobuf:"bytes,2,opt,name=country_name,json=countryName,proto3" json:"country_name"`
	Gold                 int32    `protobuf:"varint,3,opt,name=gold,proto3" json:"gold"`
	Silver               int32    `protobuf:"varint,4,opt,name=silver,proto3" json:"silver"`
	Bronze               int32    `protobuf:"varint,5,opt,name=bronze,proto3" json:"bronze"`
	Ranking              int32    `protobuf:"varint,6,opt,name=ranking,proto3" json:"ranking"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CountryMedalCount) Reset()         { *m = CountryMedalCount{} }
func (m *CountryMedalCount) String() string { return proto.CompactTextString(m) }
func (*CountryMedalCount) ProtoMessage()    {}
func (*CountryMedalCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_f51de6f17ebbb61b, []int{6}
}
func (m *CountryMedalCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CountryMedalCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CountryMedalCount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CountryMedalCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountryMedalCount.Merge(m, src)
}
func (m *CountryMedalCount) XXX_Size() int {
	return m.Size()
}
func (m *CountryMedalCount) XXX_DiscardUnknown() {
	xxx_messageInfo_CountryMedalCount.DiscardUnknown(m)
}

var xxx_messageInfo_CountryMedalCount proto.InternalMessageInfo

func (m *CountryMedalCount) GetCountryId() int64 {
	if m != nil {
		return m.CountryId
	}
	return 0
}

func (m *CountryMedalCount) GetCountryName() string {
	if m != nil {
		return m.CountryName
	}
	return ""
}

func (m *CountryMedalCount) GetGold() int32 {
	if m != nil {
		return m.Gold
	}
	return 0
}

func (m *CountryMedalCount) GetSilver() int32 {
	if m != nil {
		return m.Silver
	}
	return 0
}

func (m *CountryMedalCount) GetBronze() int32 {
	if m != nil {
		return m.Bronze
	}
	return 0
}

func (m *CountryMedalCount) GetRanking() int32 {
	if m != nil {
		return m.Ranking
	}
	return 0
}

type MedalRankingResponse struct {
	CountryMedalCounts   []*CountryMedalCount `protobuf:"bytes,1,rep,name=country_medal_counts,json=countryMedalCounts,proto3" json:"country_medal_counts"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *MedalRankingResponse) Reset()         { *m = MedalRankingResponse{} }
func (m *MedalRankingResponse) String() string { return proto.CompactTextString(m) }
func (*MedalRankingResponse) ProtoMessage()    {}
func (*MedalRankingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f51de6f17ebbb61b, []int{7}
}
func (m *MedalRankingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MedalRankingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MedalRankingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MedalRankingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MedalRankingResponse.Merge(m, src)
}
func (m *MedalRankingResponse) XXX_Size() int {
	return m.Size()
}
func (m *MedalRankingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MedalRankingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MedalRankingResponse proto.InternalMessageInfo

func (m *MedalRankingResponse) GetCountryMedalCounts() []*CountryMedalCount {
	if m != nil {
		return m.CountryMedalCounts
	}
	return nil
}

func init() {
	proto.RegisterType((*Medal)(nil), "medal_service.Medal")
	proto.RegisterType((*GetSingleRequest)(nil), "medal_service.GetSingleRequest")
	proto.RegisterType((*ListRequest)(nil), "medal_service.ListRequest")
	proto.RegisterType((*ListResponse)(nil), "medal_service.ListResponse")
	proto.RegisterType((*Message)(nil), "medal_service.Message")
	proto.RegisterType((*Empty)(nil), "medal_service.Empty")
	proto.RegisterType((*CountryMedalCount)(nil), "medal_service.CountryMedalCount")
	proto.RegisterType((*MedalRankingResponse)(nil), "medal_service.MedalRankingResponse")
}

func init() { proto.RegisterFile("medal_service/medal.proto", fileDescriptor_f51de6f17ebbb61b) }

var fileDescriptor_f51de6f17ebbb61b = []byte{
	// 555 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xcd, 0x8e, 0x12, 0x4d,
	0x14, 0xfd, 0x1a, 0x68, 0x9a, 0xbe, 0xf0, 0xe9, 0x58, 0x21, 0x93, 0x1e, 0x8c, 0x88, 0x3d, 0x1b,
	0x16, 0x06, 0x93, 0x31, 0xd1, 0x35, 0x2a, 0x4e, 0x26, 0x99, 0x71, 0x51, 0xf3, 0x00, 0xa4, 0x87,
	0xba, 0xc1, 0xd2, 0xfe, 0xb3, 0xab, 0x20, 0xc1, 0x57, 0xf0, 0x05, 0xdc, 0xf9, 0x10, 0xbe, 0x81,
	0x2b, 0x97, 0x3e, 0x82, 0xc1, 0x17, 0x31, 0x7d, 0xab, 0xda, 0x48, 0xc3, 0x42, 0xdd, 0xd5, 0x39,
	0xa7, 0xea, 0x72, 0xcf, 0xb9, 0xb7, 0x81, 0x93, 0x04, 0x45, 0x14, 0xcf, 0x15, 0x16, 0x6b, 0xb9,
	0xc0, 0x47, 0x84, 0x26, 0x79, 0x91, 0xe9, 0x8c, 0xfd, 0xbf, 0x23, 0x85, 0x5f, 0x1c, 0x70, 0xaf,
	0x4a, 0x86, 0xdd, 0x82, 0x86, 0x14, 0x81, 0x33, 0x72, 0xc6, 0x4d, 0xde, 0x90, 0x82, 0xdd, 0x03,
	0x58, 0x64, 0xab, 0x54, 0x17, 0x9b, 0xb9, 0x14, 0x41, 0x83, 0x78, 0xdf, 0x32, 0x17, 0x82, 0x31,
	0x68, 0xe9, 0x4d, 0x8e, 0x41, 0x73, 0xe4, 0x8c, 0x7d, 0x4e, 0x67, 0x76, 0x02, 0x1d, 0x5c, 0x63,
	0xaa, 0xcb, 0x07, 0x2d, 0x7a, 0xe0, 0x11, 0xbe, 0xa0, 0x6a, 0x91, 0x7e, 0x1d, 0xa3, 0xc6, 0x52,
	0x74, 0xe9, 0x91, 0x6f, 0x19, 0x23, 0x2f, 0x0a, 0x8c, 0x34, 0x8a, 0x79, 0xa4, 0x83, 0xb6, 0x91,
	0x2d, 0x33, 0xd5, 0xa5, 0xbc, 0xca, 0x45, 0x25, 0x7b, 0x46, 0xb6, 0xcc, 0x54, 0x87, 0x21, 0x1c,
	0x9d, 0xa3, 0xbe, 0x96, 0xe9, 0x32, 0x46, 0x8e, 0xef, 0x56, 0xa8, 0x74, 0xdd, 0x4e, 0xf8, 0xc1,
	0x81, 0xee, 0xa5, 0x54, 0xba, 0xd2, 0x19, 0xb4, 0xf2, 0x68, 0x89, 0x74, 0xc3, 0xe5, 0x74, 0x66,
	0x7d, 0x70, 0x63, 0x99, 0x48, 0x4d, 0x6e, 0x5d, 0x6e, 0x00, 0x0b, 0xc0, 0xb3, 0xb6, 0xc9, 0x6c,
	0x93, 0x57, 0xf0, 0xdf, 0xfd, 0x86, 0x1c, 0x7a, 0xa6, 0x19, 0x95, 0x67, 0xa9, 0xa2, 0x5f, 0xa6,
	0xa2, 0xb6, 0x61, 0x03, 0xd8, 0x43, 0x68, 0xd3, 0xb4, 0x54, 0xd0, 0x18, 0x35, 0xc7, 0xdd, 0xb3,
	0xfe, 0x64, 0x67, 0x78, 0x13, 0x1a, 0x1c, 0xb7, 0x77, 0xc2, 0x53, 0xf0, 0xae, 0x50, 0xa9, 0xd2,
	0x48, 0x00, 0x5e, 0x62, 0x8e, 0x54, 0xd0, 0xe7, 0x15, 0x0c, 0x3d, 0x70, 0x67, 0x49, 0xae, 0x37,
	0xe1, 0x67, 0x07, 0xee, 0x3c, 0x37, 0x3e, 0xa8, 0x0c, 0x9d, 0x6b, 0x43, 0x77, 0xea, 0x43, 0x7f,
	0x00, 0xbd, 0x4a, 0x4e, 0xa3, 0x04, 0x29, 0x27, 0x9f, 0x77, 0x2d, 0xf7, 0x2a, 0x4a, 0xb0, 0xcc,
	0x75, 0x99, 0xc5, 0x82, 0xa2, 0x72, 0x39, 0x9d, 0xd9, 0x31, 0xb4, 0x95, 0x8c, 0xd7, 0x58, 0x50,
	0x4a, 0x2e, 0xb7, 0xa8, 0xe4, 0x6f, 0x8a, 0x2c, 0x7d, 0x8f, 0x14, 0x90, 0xcb, 0x2d, 0x2a, 0xdb,
	0x2f, 0xa2, 0xf4, 0xad, 0x4c, 0x97, 0xb4, 0x0a, 0x2e, 0xaf, 0x60, 0xf8, 0x06, 0xfa, 0xc6, 0xb4,
	0xc1, 0xbf, 0xf2, 0xe3, 0xd0, 0xaf, 0x1a, 0x33, 0x11, 0x11, 0x52, 0x81, 0x43, 0xb9, 0x8d, 0x6a,
	0xb9, 0xed, 0xf9, 0xe6, 0x6c, 0x51, 0xa7, 0xd4, 0xd9, 0xa7, 0x26, 0xf4, 0x08, 0x5f, 0x9b, 0x67,
	0xec, 0x09, 0x74, 0xa6, 0x42, 0x98, 0xaf, 0xe5, 0xe0, 0x28, 0x06, 0x07, 0x59, 0xf6, 0x14, 0xfc,
	0x99, 0x90, 0xfa, 0xef, 0x1f, 0xbe, 0x84, 0xee, 0x0b, 0x2c, 0x37, 0xc6, 0xc0, 0xfb, 0xb5, 0x4b,
	0xf5, 0x9d, 0x1f, 0x1c, 0xef, 0x55, 0x31, 0xeb, 0x30, 0x03, 0x28, 0xb7, 0x8d, 0xaa, 0x28, 0x36,
	0xa8, 0xdd, 0xfa, 0xed, 0xab, 0x18, 0xdc, 0x3d, 0xa8, 0xd9, 0x90, 0xa7, 0xd0, 0x39, 0x47, 0xfd,
	0x87, 0xbd, 0x1c, 0x76, 0x74, 0x09, 0xb7, 0xab, 0x12, 0x76, 0x84, 0x7b, 0x81, 0xd0, 0x7a, 0x0e,
	0x4e, 0x0f, 0xae, 0xfa, 0xee, 0xd4, 0x9f, 0x1d, 0x7d, 0xdd, 0x0e, 0x9d, 0x6f, 0xdb, 0xa1, 0xf3,
	0x7d, 0x3b, 0x74, 0x3e, 0xfe, 0x18, 0xfe, 0x77, 0xd3, 0xa6, 0x3f, 0xb9, 0xc7, 0x3f, 0x03, 0x00,
	0x00, 0xff, 0xff, 0xa5, 0x40, 0x00, 0x74, 0x01, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MedalServiceClient is the client API for MedalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MedalServiceClient interface {
	AddMedal(ctx context.Context, in *Medal, opts ...grpc.CallOption) (*Medal, error)
	EditMedal(ctx context.Context, in *Medal, opts ...grpc.CallOption) (*Medal, error)
	DeleteMedal(ctx context.Context, in *GetSingleRequest, opts ...grpc.CallOption) (*Message, error)
	ListMedals(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	GetMedal(ctx context.Context, in *GetSingleRequest, opts ...grpc.CallOption) (*Medal, error)
	GetMedalRanking(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MedalRankingResponse, error)
}

type medalServiceClient struct {
	cc *grpc.ClientConn
}

func NewMedalServiceClient(cc *grpc.ClientConn) MedalServiceClient {
	return &medalServiceClient{cc}
}

func (c *medalServiceClient) AddMedal(ctx context.Context, in *Medal, opts ...grpc.CallOption) (*Medal, error) {
	out := new(Medal)
	err := c.cc.Invoke(ctx, "/medal_service.MedalService/AddMedal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medalServiceClient) EditMedal(ctx context.Context, in *Medal, opts ...grpc.CallOption) (*Medal, error) {
	out := new(Medal)
	err := c.cc.Invoke(ctx, "/medal_service.MedalService/EditMedal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medalServiceClient) DeleteMedal(ctx context.Context, in *GetSingleRequest, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/medal_service.MedalService/DeleteMedal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medalServiceClient) ListMedals(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/medal_service.MedalService/ListMedals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medalServiceClient) GetMedal(ctx context.Context, in *GetSingleRequest, opts ...grpc.CallOption) (*Medal, error) {
	out := new(Medal)
	err := c.cc.Invoke(ctx, "/medal_service.MedalService/GetMedal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medalServiceClient) GetMedalRanking(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MedalRankingResponse, error) {
	out := new(MedalRankingResponse)
	err := c.cc.Invoke(ctx, "/medal_service.MedalService/GetMedalRanking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MedalServiceServer is the server API for MedalService service.
type MedalServiceServer interface {
	AddMedal(context.Context, *Medal) (*Medal, error)
	EditMedal(context.Context, *Medal) (*Medal, error)
	DeleteMedal(context.Context, *GetSingleRequest) (*Message, error)
	ListMedals(context.Context, *ListRequest) (*ListResponse, error)
	GetMedal(context.Context, *GetSingleRequest) (*Medal, error)
	GetMedalRanking(context.Context, *Empty) (*MedalRankingResponse, error)
}

// UnimplementedMedalServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMedalServiceServer struct {
}

func (*UnimplementedMedalServiceServer) AddMedal(ctx context.Context, req *Medal) (*Medal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMedal not implemented")
}
func (*UnimplementedMedalServiceServer) EditMedal(ctx context.Context, req *Medal) (*Medal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditMedal not implemented")
}
func (*UnimplementedMedalServiceServer) DeleteMedal(ctx context.Context, req *GetSingleRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMedal not implemented")
}
func (*UnimplementedMedalServiceServer) ListMedals(ctx context.Context, req *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMedals not implemented")
}
func (*UnimplementedMedalServiceServer) GetMedal(ctx context.Context, req *GetSingleRequest) (*Medal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMedal not implemented")
}
func (*UnimplementedMedalServiceServer) GetMedalRanking(ctx context.Context, req *Empty) (*MedalRankingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMedalRanking not implemented")
}

func RegisterMedalServiceServer(s *grpc.Server, srv MedalServiceServer) {
	s.RegisterService(&_MedalService_serviceDesc, srv)
}

func _MedalService_AddMedal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Medal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedalServiceServer).AddMedal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/medal_service.MedalService/AddMedal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedalServiceServer).AddMedal(ctx, req.(*Medal))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedalService_EditMedal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Medal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedalServiceServer).EditMedal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/medal_service.MedalService/EditMedal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedalServiceServer).EditMedal(ctx, req.(*Medal))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedalService_DeleteMedal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSingleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedalServiceServer).DeleteMedal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/medal_service.MedalService/DeleteMedal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedalServiceServer).DeleteMedal(ctx, req.(*GetSingleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedalService_ListMedals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedalServiceServer).ListMedals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/medal_service.MedalService/ListMedals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedalServiceServer).ListMedals(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedalService_GetMedal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSingleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedalServiceServer).GetMedal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/medal_service.MedalService/GetMedal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedalServiceServer).GetMedal(ctx, req.(*GetSingleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedalService_GetMedalRanking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedalServiceServer).GetMedalRanking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/medal_service.MedalService/GetMedalRanking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedalServiceServer).GetMedalRanking(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _MedalService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "medal_service.MedalService",
	HandlerType: (*MedalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMedal",
			Handler:    _MedalService_AddMedal_Handler,
		},
		{
			MethodName: "EditMedal",
			Handler:    _MedalService_EditMedal_Handler,
		},
		{
			MethodName: "DeleteMedal",
			Handler:    _MedalService_DeleteMedal_Handler,
		},
		{
			MethodName: "ListMedals",
			Handler:    _MedalService_ListMedals_Handler,
		},
		{
			MethodName: "GetMedal",
			Handler:    _MedalService_GetMedal_Handler,
		},
		{
			MethodName: "GetMedalRanking",
			Handler:    _MedalService_GetMedalRanking_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "medal_service/medal.proto",
}

func (m *Medal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Medal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Medal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintMedal(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintMedal(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AthleteId) > 0 {
		i -= len(m.AthleteId)
		copy(dAtA[i:], m.AthleteId)
		i = encodeVarintMedal(dAtA, i, uint64(len(m.AthleteId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.EventId != 0 {
		i = encodeVarintMedal(dAtA, i, uint64(m.EventId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintMedal(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CountryId != 0 {
		i = encodeVarintMedal(dAtA, i, uint64(m.CountryId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintMedal(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetSingleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSingleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSingleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintMedal(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AthleteId) > 0 {
		i -= len(m.AthleteId)
		copy(dAtA[i:], m.AthleteId)
		i = encodeVarintMedal(dAtA, i, uint64(len(m.AthleteId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.EventId != 0 {
		i = encodeVarintMedal(dAtA, i, uint64(m.EventId))
		i--
		dAtA[i] = 0x20
	}
	if m.Country != 0 {
		i = encodeVarintMedal(dAtA, i, uint64(m.Country))
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintMedal(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Page != 0 {
		i = encodeVarintMedal(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Medals) > 0 {
		for iNdEx := len(m.Medals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Medals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMedal(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Count != 0 {
		i = encodeVarintMedal(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintMedal(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Empty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *CountryMedalCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountryMedalCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CountryMedalCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ranking != 0 {
		i = encodeVarintMedal(dAtA, i, uint64(m.Ranking))
		i--
		dAtA[i] = 0x30
	}
	if m.Bronze != 0 {
		i = encodeVarintMedal(dAtA, i, uint64(m.Bronze))
		i--
		dAtA[i] = 0x28
	}
	if m.Silver != 0 {
		i = encodeVarintMedal(dAtA, i, uint64(m.Silver))
		i--
		dAtA[i] = 0x20
	}
	if m.Gold != 0 {
		i = encodeVarintMedal(dAtA, i, uint64(m.Gold))
		i--
		dAtA[i] = 0x18
	}
	if len(m.CountryName) > 0 {
		i -= len(m.CountryName)
		copy(dAtA[i:], m.CountryName)
		i = encodeVarintMedal(dAtA, i, uint64(len(m.CountryName)))
		i--
		dAtA[i] = 0x12
	}
	if m.CountryId != 0 {
		i = encodeVarintMedal(dAtA, i, uint64(m.CountryId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MedalRankingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MedalRankingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MedalRankingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CountryMedalCounts) > 0 {
		for iNdEx := len(m.CountryMedalCounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CountryMedalCounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMedal(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintMedal(dAtA []byte, offset int, v uint64) int {
	offset -= sovMedal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Medal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMedal(uint64(m.Id))
	}
	if m.CountryId != 0 {
		n += 1 + sovMedal(uint64(m.CountryId))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovMedal(uint64(l))
	}
	if m.EventId != 0 {
		n += 1 + sovMedal(uint64(m.EventId))
	}
	l = len(m.AthleteId)
	if l > 0 {
		n += 1 + l + sovMedal(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovMedal(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovMedal(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSingleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMedal(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovMedal(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovMedal(uint64(m.Limit))
	}
	if m.Country != 0 {
		n += 1 + sovMedal(uint64(m.Country))
	}
	if m.EventId != 0 {
		n += 1 + sovMedal(uint64(m.EventId))
	}
	l = len(m.AthleteId)
	if l > 0 {
		n += 1 + l + sovMedal(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovMedal(uint64(m.Count))
	}
	if len(m.Medals) > 0 {
		for _, e := range m.Medals {
			l = e.Size()
			n += 1 + l + sovMedal(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovMedal(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Empty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CountryMedalCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CountryId != 0 {
		n += 1 + sovMedal(uint64(m.CountryId))
	}
	l = len(m.CountryName)
	if l > 0 {
		n += 1 + l + sovMedal(uint64(l))
	}
	if m.Gold != 0 {
		n += 1 + sovMedal(uint64(m.Gold))
	}
	if m.Silver != 0 {
		n += 1 + sovMedal(uint64(m.Silver))
	}
	if m.Bronze != 0 {
		n += 1 + sovMedal(uint64(m.Bronze))
	}
	if m.Ranking != 0 {
		n += 1 + sovMedal(uint64(m.Ranking))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MedalRankingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CountryMedalCounts) > 0 {
		for _, e := range m.CountryMedalCounts {
			l = e.Size()
			n += 1 + l + sovMedal(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMedal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMedal(x uint64) (n int) {
	return sovMedal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Medal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMedal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Medal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Medal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryId", wireType)
			}
			m.CountryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountryId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AthleteId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AthleteId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMedal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMedal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSingleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMedal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSingleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSingleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMedal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMedal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMedal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AthleteId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AthleteId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMedal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMedal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMedal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Medals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMedal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMedal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Medals = append(m.Medals, &Medal{})
			if err := m.Medals[len(m.Medals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMedal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMedal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMedal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMedal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMedal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMedal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMedal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMedal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountryMedalCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMedal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountryMedalCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountryMedalCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryId", wireType)
			}
			m.CountryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountryId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gold", wireType)
			}
			m.Gold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gold |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silver", wireType)
			}
			m.Silver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Silver |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bronze", wireType)
			}
			m.Bronze = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bronze |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ranking", wireType)
			}
			m.Ranking = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ranking |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMedal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMedal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MedalRankingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMedal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MedalRankingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MedalRankingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryMedalCounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMedal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMedal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryMedalCounts = append(m.CountryMedalCounts, &CountryMedalCount{})
			if err := m.CountryMedalCounts[len(m.CountryMedalCounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMedal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMedal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMedal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMedal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMedal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMedal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMedal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMedal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMedal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMedal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMedal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMedal = fmt.Errorf("proto: unexpected end of group")
)
